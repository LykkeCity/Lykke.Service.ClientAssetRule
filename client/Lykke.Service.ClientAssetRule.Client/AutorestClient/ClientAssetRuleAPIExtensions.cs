// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.ClientAssetRule.Client.AutorestClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ClientAssetRuleAPI.
    /// </summary>
    public static partial class ClientAssetRuleAPIExtensions
    {
            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object IsAlive(this IClientAssetRuleAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsAliveAsync(this IClientAssetRuleAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all client asset ruls.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<RuleModel> GetRules(this IClientAssetRuleAPI operations)
            {
                return operations.GetRulesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all client asset ruls.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RuleModel>> GetRulesAsync(this IClientAssetRuleAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRulesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model what describe a rule.
            /// </param>
            public static ErrorResponse UpdateRule(this IClientAssetRuleAPI operations, RuleModel model = default(RuleModel))
            {
                return operations.UpdateRuleAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model what describe a rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> UpdateRuleAsync(this IClientAssetRuleAPI operations, RuleModel model = default(RuleModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateRuleWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds the rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model what describe a rule.
            /// </param>
            public static ErrorResponse AddRule(this IClientAssetRuleAPI operations, NewRuleModel model = default(NewRuleModel))
            {
                return operations.AddRuleAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds the rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model what describe a rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> AddRuleAsync(this IClientAssetRuleAPI operations, NewRuleModel model = default(NewRuleModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddRuleWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a client asset rule by specified id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleId'>
            /// The rule id.
            /// </param>
            public static object GetRuleById(this IClientAssetRuleAPI operations, string ruleId)
            {
                return operations.GetRuleByIdAsync(ruleId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a client asset rule by specified id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleId'>
            /// The rule id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetRuleByIdAsync(this IClientAssetRuleAPI operations, string ruleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRuleByIdWithHttpMessagesAsync(ruleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the rule by specified id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleId'>
            /// The id of rule to delete.
            /// </param>
            public static ErrorResponse DeleteRule(this IClientAssetRuleAPI operations, string ruleId)
            {
                return operations.DeleteRuleAsync(ruleId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the rule by specified id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ruleId'>
            /// The id of rule to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> DeleteRuleAsync(this IClientAssetRuleAPI operations, string ruleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRuleWithHttpMessagesAsync(ruleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
